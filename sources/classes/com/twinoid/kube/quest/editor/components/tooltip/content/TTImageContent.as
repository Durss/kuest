package com.twinoid.kube.quest.editor.components.tooltip.content {	import com.nurun.components.text.CssTextField;	import com.twinoid.kube.quest.editor.components.LoaderSpinning;	import flash.display.Loader;	import flash.display.Sprite;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.geom.Point;	import flash.net.URLRequest;	import gs.TweenLite;	/**	 * Displays an image on the tooltip.	 * 	 * @author  Francois	 */	public class TTImageContent extends Sprite implements ToolTipContent {		protected var _imgUrl:String;		protected var _loader:Loader;		protected var _error:CssTextField;		protected var _spin:LoaderSpinning;		protected var _ratio:Number;		private var _defaultSizes:Point;								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>TTImageContent</code>.		 * 		 * @param imgUrl	image URL to display		 * @param ratio		resize ratio		 */		public function TTImageContent(imgUrl:String, ratio:Number = 1) {			if(imgUrl == null) return;			_ratio = ratio;			_imgUrl = imgUrl;			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Gets the virtual component's width.		 */		override public function get width():Number {			if(_defaultSizes == null) return super.width;			return _defaultSizes.x * _loader.scaleX;		}		/**		 * Gets the virtual component's hright.		 */		override public function get height():Number {			if(_defaultSizes == null) return super.height;			return _defaultSizes.y * _loader.scaleY;		}		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Makes the component garbage collectable.		 */		public function dispose():void {			if(numChildren == 0) return;						while(numChildren > 0){ removeChildAt(0); }							TweenLite.killTweensOf(_loader);						try{				_loader.close();				_loader.unload();			}catch(e:Error){}						_loader.contentLoaderInfo.removeEventListener(Event.COMPLETE,			loadCompleteHandler);			_loader.contentLoaderInfo.removeEventListener(ErrorEvent.ERROR,			loadErrorHandler);			_loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR,	loadErrorHandler);			_loader.contentLoaderInfo.removeEventListener(IOErrorEvent.DISK_ERROR,	loadErrorHandler);						_spin.dispose();			_error = null;			_spin = null;		}								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		protected function initialize():void {			_spin	= addChild(new LoaderSpinning()) as LoaderSpinning;			_error	= addChild(new CssTextField("error")) as CssTextField;			_loader	= addChild(new Loader()) as Loader;						_loader.contentLoaderInfo.addEventListener(Event.COMPLETE,				loadCompleteHandler);			_loader.contentLoaderInfo.addEventListener(ErrorEvent.ERROR,			loadErrorHandler);			_loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,		loadErrorHandler);			_loader.contentLoaderInfo.addEventListener(IOErrorEvent.DISK_ERROR,		loadErrorHandler);			_loader.contentLoaderInfo.addEventListener(IOErrorEvent.VERIFY_ERROR,	loadErrorHandler);			_loader.contentLoaderInfo.addEventListener(IOErrorEvent.NETWORK_ERROR,	loadErrorHandler);						_spin.x	= _spin.width * .5;			_spin.y	= _spin.height * .5;			_spin.open();			_loader.load(new URLRequest(_imgUrl));		}				/**		 * Replaces and resizes the elements.		 */		protected function computePositions():void {			dispatchEvent(new Event(Event.RESIZE));		}		/**		 * Called when loading completes.		 */		protected function loadCompleteHandler(e:Event):void {			_defaultSizes = new Point(_loader.width, _loader.height);			_loader.scaleX = _loader.scaleY = 0;			_spin.close();			removeChild(_spin);			TweenLite.to(_loader, .5, {scaleX:_ratio, scaleY:_ratio, onUpdate:computePositions});		}		/**		 * Called if loading fails.		 */		protected function loadErrorHandler(e:IOErrorEvent):void {			_error.text = "Loading error :<br/>" + _imgUrl;			_spin.close();			computePositions();		}	}}